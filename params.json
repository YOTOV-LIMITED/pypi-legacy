{
  "name": "Pypi-legacy",
  "tagline": "the codebase *currently* serving PyPI, for next-gen see https://github.com/pypa/warehouse",
  "body": "Required packages\r\n-----------------\r\n\r\nTo run the PyPI software, you need Python 2.7+ and PostgreSQL\r\n\r\n\r\nQuick development setup\r\n-----------------------\r\n\r\nIt is recommended to read\r\nhttp://wiki.python.org/moin/CheeseShopDev#DevelopmentEnvironmentHints though\r\nthis document is quite out of date, but contain some useful informations.\r\n\r\nMake sure you have a working PostgreSQL Database Available, by getting a local\r\ndevelopment install of _Warehouse_. See the Database Setup Below.\r\n\r\nMake sure your config.ini is up-to-date, initially copying from\r\nconfig.ini.template. Change CONFIG_FILE at the beginning of ``pypi.wsgi``,\r\nso it looks like this::\r\n\r\n    CONFIG_FILE = 'config.ini'\r\n\r\nThen, you can create a development environment like this, if you have\r\nvirtualenv installed::\r\n\r\n    $ virtualenv --no-site-packages .\r\n    $ pip install -r requirements.txt\r\n\r\nThen you can launch the server using the pypi.wsgi script::\r\n\r\n    $ python pypi.wsgi\r\n    Serving on port 8000...\r\n\r\nPyPI will be available in your browser at http://localhost:8000\r\n\r\nDatabase Setup\r\n--------------\r\n\r\n\r\nPostgres\r\n~~~~~~~~\r\n\r\n.. note::\r\n\r\n    These instruction are in progress.\r\n\r\n\r\nConnect Legacy-PYPI to warehouse\r\n````````````````````````````````\r\n\r\nIt is highly recommended, and simpler to connect legacy-pypi to an already\r\nworking `warehouse <https://github.com/pypa/warehouse>`_ setup.\r\n\r\nOnce you have a working warehouse setup, it should expose the PostgreSQL\r\ndatabase on port 5433, you can check that in the ``docker-compose.yml`` file\r\nwhich should contain a ``ports`` section like so::\r\n\r\n  db:\r\n    image: postgres:9.5\r\n    ports:\r\n        - \"5433:5433\"\r\n\r\n\r\nModify the pypi-legacy ``config.ini`` ``[database]`` section to connect to this\r\ndatabase, You can find the required information as follows. In the\r\n``docker-compose.yml`` file find the line the set the DATABASE_URL::\r\n\r\n    DATABASE_URL: postgresql://postgres@db/warehouse\r\n\r\nIt is structure in the following way: ``DATABASE_URL: postgresql://<user_name>@<host>/<database_name>``\r\n\r\nUse the ``docker-machine env`` to find the Docker IP, for example::\r\n\r\n\r\n    $ docker-machine env\r\n    export DOCKER_TLS_VERIFY=\"1\"\r\n    export DOCKER_HOST=\"tcp://192.168.99.100:2376\"\r\n    export DOCKER_CERT_PATH=\"$HOME/.docker/machine/machines/default\"\r\n    export DOCKER_MACHINE_NAME=\"default\"\r\n\r\nHere the docker-ip is ``192.168.99.100``.\r\n\r\nThe final ``config.ini`` will be like::\r\n\r\n    [database]\r\n\r\n    ;Postgres Database using\r\n    ;warehouse's docker-compose\r\n    host = 192.168.99.100\r\n    port = 5433\r\n    name = warehouse\r\n    user = postgres\r\n\r\nStart warehouse as usual before starting PyPI-legacy, then start pypi-legacy\r\nthat should now connect to the local warehouse database.\r\n\r\n\r\nRun a local Postgres Database\r\n`````````````````````````````\r\n\r\nIt is recommended not to use a local PostgreSQL database as all the Database\r\nmigration and maintenance tasks are performed by warehouse.\r\n\r\nTo fill a database, run ``pkgbase_schema.sql`` on an empty Postgres database.\r\nThen run ``tools/demodata`` to populate the database with dummy data.\r\n\r\nTo initialize an empty Postgres Database, after making sure Postgres is\r\ninstalled on your machine, change to a directory of your convenience, like the\r\nroot of this repository, and issue the following::\r\n\r\n  $ mkdir tmp\r\n  $ chmod 700 tmp\r\n  $ initdb -D tmp\r\n\r\nThe ``initdb`` step will likely tell you how to start a database server; likely\r\nsomething along the line of::\r\n\r\n  $ pg_ctl -D tmp -l logfile start\r\n\r\nYou want to start that in a separate terminal, in the folder where you\r\ncreated the previous ``tmp`` directory, and run the above command.\r\n\r\n\r\nBack to our initial terminal use the following to list all available Postgres\r\ndatabases::\r\n\r\n  $ psql -l\r\n     Name    | Owner    | Encoding |   Collate   |    Ctype    |  Access privileges\r\n  -----------+----------+----------+-------------+-------------+---------------------\r\n   postgres  | guido_vr | UTF8     | en_US.UTF-8 | en_US.UTF-8 |\r\n   template0 | guido_vr | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/guido_vr     +\r\n             |          |          |             |             | guido_vr=CTc/guido_vr\r\n   template1 | guido_vr | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/guido_vr     +\r\n             |          |          |             |             | guido_vr=CTc/guido_vr\r\n\r\nYour exact input will differ. Note the _name_ of the database. In our case\r\nabove, ``postgres``, and the _user_ name. In our case ``guido_vr``, they will\r\nbe of use to configure the database in the ``config.ini`` file later.\r\n\r\nWe now need to populate the database with an example data. For example,\r\n`example.sql <https://github.com/pypa/warehouse/tree/master/dev>`_ that can\r\nbe found on the warehouse repository. After having it downloaded and unpacked,\r\nuse the following::\r\n\r\n  $ pgsql -d postgres -f /path/to/example/file.sql\r\n\r\nWhere ``postgres`` is the _name_ of the database noted above.\r\n\r\n\r\nSet up the ``config.ini`` file ``[database]`` section, to connect to the Postgres\r\ninstance we just started::\r\n\r\n  [database]\r\n\r\n  ;Postgres Database\r\n  host = localhost\r\n  port = 5433\r\n  name = postgres\r\n  user = guido_vr\r\n\r\n\r\nThe default _host_ is likely ``localhost``, and the _port_ number ``5433`` as well.\r\nadapt ``name`` and ``user`` with the value noted before.\r\n\r\n\r\nSqlite\r\n~~~~~~\r\n\r\n.. note::\r\n\r\n    Usage of the SqLite local database is not recommended; And might not be\r\n    functional.\r\n\r\n\r\nFor testing purposes, run the following to create a ``packages.db`` file at the\r\nroot of the repository::\r\n\r\n    python2 tools/mksqlite.py\r\n\r\nSet ``[database]driver`` to ``sqlite3`` in ``config.ini``, and\r\n``[database]name`` to ``packages.db``::\r\n\r\n    [database]\r\n\r\n    driver = sqlite3\r\n    name = package.db\r\n\r\n\r\n\r\nThen run ``tools/demodata``    to populate the database.\r\n\r\nPyPI Requires the ``citext`` extension to be installed.\r\n\r\nTestPyPI Database Setup\r\n-----------------------\r\n\r\ntestpypi runs under postgres; because I don't care to fill my head with such\r\ntrivialities, the setup commands are:\r\n\r\n   createdb -O testpypi testpypi\r\n   psql -U testpypi testpypi <pkgbase_schema.sql\r\n\r\n\r\nRestarting PyPI\r\n---------------\r\n\r\nPyPI has 2 different pieces that need started, web server and the task runner.\r\n\r\n    # Restart the web server\r\n    $ /etc/init.d/pypi restart\r\n    # Restart the task runner\r\n    $ initctl restart pypi-worker\r\n\r\nClearing a stuck cache\r\n----------------------\r\n\r\nUsers reporting stale data being displayed? Try:\r\n\r\n  curl -X PURGE https://pypi.python.org/pypi/setuptools\r\n\r\n(where the URL is the relevant one to the issue, I presume)\r\n\r\nTo see what fastly thinks it knows about a page (or how it's getting to you) try:\r\n\r\n  curl -I -H 'Fastly-Debug: 1'  https://pypi.python.org/pypi/setuptools\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}